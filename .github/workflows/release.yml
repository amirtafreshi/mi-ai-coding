name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build production bundle
        run: npm run build

      - name: Create build archive
        run: |
          tar -czf build-artifacts.tar.gz .next/ package.json package-lock.json prisma/ public/

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract section for current version from CHANGELOG
            VERSION="${{ steps.get_version.outputs.VERSION }}"
            awk "/## \[${VERSION#v}\]/,/## \[/{if(/## \[${VERSION#v}\]/)f=1;else if(/## \[/)f=0;if(f)print}" CHANGELOG.md > release_notes.md

            # If no specific version section found, use latest changes
            if [ ! -s release_notes.md ]; then
              echo "Release $VERSION" > release_notes.md
              echo "" >> release_notes.md
              echo "See CHANGELOG.md for details." >> release_notes.md
            fi
          else
            echo "Release ${{ steps.get_version.outputs.VERSION }}" > release_notes.md
            echo "" >> release_notes.md
            echo "No changelog available." >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
          files: |
            build-artifacts.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG for next development
        if: "!contains(steps.get_version.outputs.VERSION, '-')"
        run: |
          if [ -f CHANGELOG.md ]; then
            # Add unreleased section if it doesn't exist
            if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
              sed -i '1a\\n## [Unreleased]\n' CHANGELOG.md
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git add CHANGELOG.md
              git commit -m "chore: prepare CHANGELOG for next release"
              git push
            fi
          fi
        continue-on-error: true

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: success()

    steps:
      - name: Send notification
        run: |
          echo "Release ${{ github.ref_name }} created successfully!"
          echo "View release at: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
