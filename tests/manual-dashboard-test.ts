import { chromium } from 'playwright'

async function testDashboard() {
  console.log('Starting manual dashboard test...\n')

  const browser = await chromium.launch({
    headless: false,
    env: { DISPLAY: ':99' }
  })

  const context = await browser.newContext({
    viewport: { width: 1920, height: 1080 }
  })

  const page = await context.newPage()

  const consoleErrors: string[] = []
  const consoleWarnings: string[] = []

  // Capture console messages
  page.on('console', (msg) => {
    const text = msg.text()
    const type = msg.type()

    if (type === 'error') {
      consoleErrors.push(text)
    } else if (type === 'warning') {
      consoleWarnings.push(text)
    }
  })

  // Capture page errors
  page.on('pageerror', (error) => {
    consoleErrors.push(`PAGE ERROR: ${error.message}`)
  })

  console.log('Step 1: Navigate to login page')
  await page.goto('http://localhost:3000/login', { waitUntil: 'networkidle' })
  await page.waitForTimeout(2000)
  console.log('✓ Login page loaded\n')

  console.log('Step 2: Login with admin credentials')
  // Use ID selectors generated by Ant Design Form
  await page.fill('#login_email', 'admin@example.com')
  await page.fill('#login_password', 'admin123')
  await page.click('button[type="submit"]')
  console.log('✓ Credentials entered and submitted\n')

  console.log('Step 3: Wait for dashboard to load')
  try {
    await page.waitForURL('http://localhost:3000/dashboard', { timeout: 30000 })
    console.log('✓ Redirected to dashboard\n')
  } catch (e) {
    console.log('Warning: Dashboard URL did not match expected pattern')
    console.log('Current URL:', page.url(), '\n')
  }

  // Wait for dashboard elements to load
  await page.waitForTimeout(5000)

  console.log('Step 4: Check for removeChild errors')
  const removeChildErrors = consoleErrors.filter(err =>
    err.toLowerCase().includes('removechild') ||
    err.toLowerCase().includes('remove child')
  )

  if (removeChildErrors.length > 0) {
    console.log('❌ FOUND removeChild errors:')
    removeChildErrors.forEach(err => console.log(`  - ${err}`))
  } else {
    console.log('✅ NO removeChild errors found!')
  }
  console.log('')

  console.log('Step 5: Check dashboard UI components visibility')
  const checks = [
    { name: 'File Explorer', selector: 'text=File Explorer' },
    { name: 'Code Editor', selector: 'text=Code Editor' },
    { name: 'Terminal VNC', selector: 'text=Terminal VNC' },
    { name: 'Playwright VNC', selector: 'text=Playwright VNC' },
    { name: 'Activity Log', selector: 'text=Activity Log' },
  ]

  for (const check of checks) {
    try {
      const element = page.locator(check.selector).first()
      const isVisible = await element.isVisible({ timeout: 3000 })
      console.log(`${isVisible ? '✅' : '❌'} ${check.name}: ${isVisible ? 'VISIBLE' : 'NOT VISIBLE'}`)
    } catch (e) {
      console.log(`❌ ${check.name}: NOT FOUND`)
    }
  }
  console.log('')

  console.log('Step 6: Take screenshot')
  await page.screenshot({
    path: '/home/master/projects/mi-ai-coding/test-results/manual-dashboard-final.png',
    fullPage: true
  })
  console.log('✓ Screenshot saved to test-results/manual-dashboard-final.png\n')

  console.log('Step 7: Console Error Report')
  console.log(`Total errors: ${consoleErrors.length}`)
  console.log(`Total warnings: ${consoleWarnings.length}\n`)

  if (consoleErrors.length > 0) {
    console.log('ALL CONSOLE ERRORS:')
    consoleErrors.slice(0, 10).forEach((err, idx) => {
      console.log(`  ${idx + 1}. ${err}`)
    })
    if (consoleErrors.length > 10) {
      console.log(`  ... and ${consoleErrors.length - 10} more errors`)
    }
  } else {
    console.log('✅ NO CONSOLE ERRORS!')
  }
  console.log('')

  console.log('=== SUMMARY ===')
  console.log(`removeChild errors: ${removeChildErrors.length}`)
  console.log(`Total errors: ${consoleErrors.length}`)
  console.log(`Dashboard accessible: ${page.url().includes('dashboard') || page.url() === 'http://localhost:3000/'}`)
  console.log('')

  console.log('Keeping browser open for 30 seconds for manual inspection...')
  console.log('View in VNC at http://localhost:6080')
  await page.waitForTimeout(30000)

  await browser.close()
  console.log('\nTest complete!')

  // Exit with error code if removeChild errors found
  process.exit(removeChildErrors.length > 0 ? 1 : 0)
}

testDashboard().catch((error) => {
  console.error('Test failed:', error)
  process.exit(1)
})
